{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\bruno\\\\Documents\\\\react\\\\e-commerce-portfolio\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\bruno\\\\Documents\\\\react\\\\e-commerce-portfolio\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\bruno\\\\Documents\\\\react\\\\e-commerce-portfolio\\\\client\\\\src\\\\components\\\\sign-up\\\\sign-up.component.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { BufferLoginButton } from \"react-social-login-buttons\";\nimport { store } from 'react-notifications-component';\nimport FormInput from '../form-input/form-input.component.jsx';\nimport { signUpStart } from '../../redux/user/user.actions.js';\nimport personalizedNotification from '../notifications/notifications.component.jsx';\nimport { SignUpContainer, Title } from './sign-up.styles.jsx';\n\nconst SignUp = ({\n  signUpStart\n}) => {\n  const _useState = useState({\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setUserCredentials = _useState2[1];\n\n  const displayName = userCredentials.displayName,\n        email = userCredentials.email,\n        password = userCredentials.password,\n        confirmPassword = userCredentials.confirmPassword;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      store.addNotification({\n        content: personalizedNotification('Error !', 'Passwords dont match!', 'error'),\n        container: 'bottom-left',\n        animationIn: [\"animated\", \"fadeIn\"],\n        animationOut: [\"animated\", \"fadeOut\"],\n        dismiss: {\n          duration: 1000\n        }\n      });\n      return;\n    } else {\n      signUpStart(email, password, displayName);\n    }\n  };\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setUserCredentials(_objectSpread({}, userCredentials, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(SignUpContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"I do not have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Sign up with your e-mail and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    type: \"text\",\n    name: \"displayName\",\n    value: displayName,\n    onChange: handleChange,\n    label: \"Display Name\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    onChange: handleChange,\n    label: \"Email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: handleChange,\n    label: \"Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"password\",\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    onChange: handleChange,\n    label: \"Confirm Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(BufferLoginButton, {\n    style: {\n      fontFamily: 'Karla'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Sign Up with Email\")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: (email, password, displayName) => dispatch(signUpStart({\n    email,\n    password,\n    displayName\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["C:\\Users\\bruno\\Documents\\react\\e-commerce-portfolio\\client\\src\\components\\sign-up\\sign-up.component.jsx"],"names":["React","useState","connect","BufferLoginButton","store","FormInput","signUpStart","personalizedNotification","SignUpContainer","Title","SignUp","displayName","email","password","confirmPassword","userCredentials","setUserCredentials","handleSubmit","event","preventDefault","addNotification","content","container","animationIn","animationOut","dismiss","duration","handleChange","target","name","value","fontFamily","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { BufferLoginButton } from \"react-social-login-buttons\";\r\nimport { store } from 'react-notifications-component';\r\n\r\nimport FormInput from '../form-input/form-input.component.jsx';\r\n\r\nimport { signUpStart } from '../../redux/user/user.actions.js';\r\nimport personalizedNotification from '../notifications/notifications.component.jsx';\r\n\r\nimport {\r\n    SignUpContainer,\r\n    Title\r\n} from './sign-up.styles.jsx';\r\n\r\nconst SignUp = ({ signUpStart }) => {\r\n\r\n    const [userCredentials, setUserCredentials] = useState({\r\n        displayName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n    });\r\n    const { displayName, email, password, confirmPassword } = userCredentials;\r\n\r\n    const handleSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        if(password !== confirmPassword){\r\n            store.addNotification({\r\n                content: personalizedNotification('Error !', 'Passwords dont match!', 'error'),\r\n                container: 'bottom-left',\r\n                animationIn: [\"animated\", \"fadeIn\"],\r\n                animationOut: [\"animated\", \"fadeOut\"],\r\n                dismiss: {\r\n                  duration: 1000,\r\n                }\r\n              })\r\n            return;\r\n        }else{\r\n        signUpStart(email, password, displayName);\r\n        }\r\n    };\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        setUserCredentials({...userCredentials, [name]: value });\r\n    };\r\n    \r\n    return(\r\n        <SignUpContainer>\r\n            <Title>I do not have an account</Title>\r\n            <span>Sign up with your e-mail and password</span>\r\n            <form onSubmit={handleSubmit}>\r\n                <FormInput\r\n                    type='text'\r\n                    name='displayName'\r\n                    value={displayName}\r\n                    onChange={handleChange}\r\n                    label='Display Name'\r\n                    required\r\n                    />\r\n                    <FormInput\r\n                    type='email'\r\n                    name='email'\r\n                    value={email}\r\n                    onChange={handleChange}\r\n                    label='Email'\r\n                    required\r\n                    />\r\n                    <FormInput\r\n                    type='password'\r\n                    name='password'\r\n                    value={password}\r\n                    onChange={handleChange}\r\n                    label='Password'\r\n                    required\r\n                    />\r\n                    <FormInput\r\n                    type='password'\r\n                    name='confirmPassword'\r\n                    value={confirmPassword}\r\n                    onChange={handleChange}\r\n                    label='Confirm Password'\r\n                    required\r\n                    />\r\n                    <BufferLoginButton style={{fontFamily: 'Karla' }}>Sign Up with Email</BufferLoginButton>\r\n            </form>\r\n        </SignUpContainer>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signUpStart: (email, password, displayName) => dispatch(signUpStart({ email, password, displayName })),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignUp);"]},"metadata":{},"sourceType":"module"}